from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.popup import Popup
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA
import os
import requests
import webbrowser
import json
from datetime import datetime

# Razorpay API keys (replace with your actual keys)
RAZORPAY_KEY = 'rzp_test_your_key_here'
RAZORPAY_SECRET = 'your_secret_key_here'

# Webhook URL (use webhook.site or your server URL)
WEBHOOK_URL = 'https://webhook.site/your-unique-url-here'

class DonationApp(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(orientation='vertical', **kwargs)

        # Input fields
        self.name_input = TextInput(hint_text='Full Name')
        self.pan_input = TextInput(hint_text='PAN Number')
        self.amount_input = TextInput(hint_text='Donation Amount')

        # Payment button
        self.pay_button = Button(text='Donate & Generate Certificate')
        self.pay_button.bind(on_press=self.initiate_payment)

        # Add widgets to layout
        self.add_widget(Label(text='Donation Certificate Generator'))
        self.add_widget(self.name_input)
        self.add_widget(self.pan_input)
        self.add_widget(self.amount_input)
        self.add_widget(self.pay_button)

        # Generate key pair if not exists
        if not os.path.exists('/storage/emulated/0/DonationApp/private.pem'):
            self.generate_keys()

    def generate_keys(self):
        key = RSA.generate(2048)
        private_key = key.export_key()
        public_key = key.publickey().export_key()

        os.makedirs('/storage/emulated/0/DonationApp', exist_ok=True)
        with open('/storage/emulated/0/DonationApp/private.pem', 'wb') as f:
            f.write(private_key)
        with open('/storage/emulated/0/DonationApp/public.pem', 'wb') as f:
            f.write(public_key)

    def initiate_payment(self, instance):
        name = self.name_input.text
        pan = self.pan_input.text
        amount = self.amount_input.text

        if not name or not pan or not amount:
            return

        # Create a Razorpay payment order
        response = requests.post(
            'https://api.razorpay.com/v1/orders',
            auth=(RAZORPAY_KEY, RAZORPAY_SECRET),
            json={
                'amount': int(float(amount) * 100),
                'currency': 'INR',
                'receipt': 'receipt_' + name,
                'payment_capture': 1,
                'notes': {
                    'name': name,
                    'pan': pan,
                    'amount': amount
                }
            }
        )

        order_data = response.json()
        self.open_payment_gateway(order_data['id'])

    def open_payment_gateway(self, order_id):
        payment_url = f'https://api.razorpay.com/v1/checkout?key_id={RAZORPAY_KEY}&order_id={order_id}'
        webbrowser.open(payment_url)

    def handle_webhook_response(self, response):
        event = response.get('event')
        if event == 'payment.captured':
            name = response['payload']['payment']['entity']['notes']['name']
            pan = response['payload']['payment']['entity']['notes']['pan']
            amount = response['payload']['payment']['entity']['notes']['amount']
            payment_date = response['payload']['payment']['entity']['created_at']
            payment_mode = response['payload']['payment']['entity']['method']

            # Generate the certificate
            self.generate_certificate(name, pan, amount, payment_date, payment_mode)

            # Show success message
            self.show_success_message(name)

    def generate_certificate(self, name, pan, amount, payment_date, payment_mode):
        file_name = f'/storage/emulated/0/DonationApp/{name}_80G_Certificate.pdf'
        c = canvas.Canvas(file_name, pagesize=A4)

        # Design the certificate based on uploaded template
        c.setFont('Helvetica-Bold', 16)
        c.drawString(100, 800, 'ABCD Charitable Trust')
        c.drawString(100, 780, 'Address: Hsr layout, Bangalore')
        c.drawString(100, 760, 'Bangalore - 560102')

        c.setFont('Helvetica', 12)
        c.drawString(100, 730, f'Received with Thanks From: {name}')
        c.drawString(100, 710, f'Date: {datetime.fromtimestamp(payment_date)}')
        c.drawString(100, 690, f'PAN No.: {pan}')
        c.drawString(100, 670, f'Received Amount: â‚¹{amount}')
        c.drawString(100, 650, f'Mode of Payment: {payment_mode}')

        # Signature block
        c.setFont('Helvetica', 12)
        c.drawString(100, 600, 'Receiver Signature: _______________')
        c.drawString(300, 600, 'Donor Signature: _______________')

        # Footer
        c.setFont('Helvetica-Bold', 10)
        c.drawString(100, 570, 'Thank you so much for your generous support!')

        c.save()
        self.sign_certificate(file_name)

    def sign_certificate(self, file_path):
        with open('/storage/emulated/0/DonationApp/private.pem', 'rb') as f:
            private_key = RSA.import_key(f.read())

        with open(file_path, 'rb') as f:
            pdf_data = f.read()

        hash_data = SHA256.new(pdf_data)
        signature = pkcs1_15.new(private_key).sign(hash_data)

        with open(file_path, 'ab') as f:
            f.write(signature)

    def show_success_message(self, name):
        popup = Popup(title='Payment Successful',
                      content=Label(text=f'Thank you {name} for your donation!\nYour certificate has been generated.'),
                      size_hint=(None, None), size=(400, 200))
        popup.open()

class DonationAppMain(App):
    def build(self):
        return DonationApp()

if __name__ == '__main__':
    DonationAppMain().run()
